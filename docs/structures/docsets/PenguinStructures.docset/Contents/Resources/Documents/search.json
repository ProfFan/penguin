{"Protocols/DefaultInitializable.html#/init()":{"name":"init()","abstract":"<p>Initialize <code>self</code> with default values. <code>self</code> must be in a valid (but unspecified) state.</p>","parent_name":"DefaultInitializable"},"Protocols/DefaultInitializable.html":{"name":"DefaultInitializable","abstract":"<p>A type is <code>DefaultInitializable</code> as long as it can be initialized with no parameters.</p>"},"Extensions/Double.html#/s:17PenguinStructures20GraphDistanceMeasureP17effectiveInfinityxvpZ":{"name":"effectiveInfinity","parent_name":"Double"},"Extensions/Float.html#/s:17PenguinStructures20GraphDistanceMeasureP17effectiveInfinityxvpZ":{"name":"effectiveInfinity","parent_name":"Float"},"Extensions/Int32.html#/s:17PenguinStructures20GraphDistanceMeasureP17effectiveInfinityxvpZ":{"name":"effectiveInfinity","parent_name":"Int32"},"Extensions/Int.html#/s:17PenguinStructures20GraphDistanceMeasureP17effectiveInfinityxvpZ":{"name":"effectiveInfinity","parent_name":"Int"},"Extensions/Int.html":{"name":"Int"},"Extensions/Int32.html":{"name":"Int32"},"Extensions/Float.html":{"name":"Float"},"Extensions/Double.html":{"name":"Double"},"Structs/_IdIndexibleDictionaryHeapIndexer.html#/init()":{"name":"init()","abstract":"<p>Initializes an empty heap indexer.</p>","parent_name":"_IdIndexibleDictionaryHeapIndexer"},"Structs/_IdIndexibleDictionaryHeapIndexer.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>Indexing operations.</p>","parent_name":"_IdIndexibleDictionaryHeapIndexer"},"Structs/_DictionaryHeapIndexer.html#/init()":{"name":"init()","abstract":"<p>Initializes an empty dictionary heap indexer.</p>","parent_name":"_DictionaryHeapIndexer"},"Structs/_DictionaryHeapIndexer.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>Indexing opreations.</p>","parent_name":"_DictionaryHeapIndexer"},"Structs/_NullHeapIndexer.html#/init()":{"name":"init()","abstract":"<p>Initialize an empty <code>self</code>.</p>","parent_name":"_NullHeapIndexer"},"Structs/_NullHeapIndexer.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>No-op indexing operations.</p>","parent_name":"_NullHeapIndexer"},"Protocols/_ConfigurableHeapIndexerProtocol.html#/Element":{"name":"Element","abstract":"<p>The elements contained within the Heap.</p>","parent_name":"_ConfigurableHeapIndexerProtocol"},"Protocols/_ConfigurableHeapIndexerProtocol.html#/Index":{"name":"Index","abstract":"<p>The index type to refer to where in the heap&rsquo;s internal data structure the element exists.</p>","parent_name":"_ConfigurableHeapIndexerProtocol"},"Protocols/_ConfigurableHeapIndexerProtocol.html#/subscript(_:)":{"name":"subscript(_:)","abstract":"<p>Maps from element to location within the data structure; if <code>newValue</code> is <code>nil</code>, removes","parent_name":"_ConfigurableHeapIndexerProtocol"},"Configurable%20Heap%20Internal%20Types.html#/_ConfigurableHeapIndexer":{"name":"_ConfigurableHeapIndexer","abstract":"<p>Represents <code>get</code> and <code>set</code> for <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/_ConfigurableHeapIndexerProtocol.html\">_ConfigurableHeapIndexerProtocol</a></code>.</p>"},"Protocols/_ConfigurableHeapIndexerProtocol.html":{"name":"_ConfigurableHeapIndexerProtocol","abstract":"<p>Indexes a heap data structure for efficient modification of element priority.</p>"},"Structs/_NullHeapIndexer.html":{"name":"_NullHeapIndexer","abstract":"<p>No-op index for a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ConfigurableHeap.html\">ConfigurableHeap</a></code>.</p>"},"Structs/_DictionaryHeapIndexer.html":{"name":"_DictionaryHeapIndexer","abstract":"<p>Indexes a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ConfigurableHeap.html\">ConfigurableHeap</a></code> of <code>Element</code>s.</p>"},"Structs/_IdIndexibleDictionaryHeapIndexer.html":{"name":"_IdIndexibleDictionaryHeapIndexer","abstract":"<p>Indexes a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ConfigurableHeap.html\">ConfigurableHeap</a></code> of <code>Element</code>s, so long as the element is <code>IdIndexible</code>.</p>"},"Configurable%20Heap%20Internal%20Types.html#/_ConfigurableHeapCursor":{"name":"_ConfigurableHeapCursor","abstract":"<p>A logical pointer into <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/ConfigurableHeap.html\">ConfigurableHeap</a></code>&lsquo;s internal data structures.</p>"},"Structs/InternalEdgePropertyMap.html#/keyPath":{"name":"keyPath","abstract":"<p>The KeyPath between <code>Graph.Edge</code> and <code>Value</code>.</p>","parent_name":"InternalEdgePropertyMap"},"Structs/InternalEdgePropertyMap.html#/init(_:on:)":{"name":"init(_:on:)","abstract":"<p>Initialize an <code>InternalEdgePropertyMap</code> from the given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/InternalEdgePropertyMap.html#/keyPath\">keyPath</a></code>.</p>","parent_name":"InternalEdgePropertyMap"},"Structs/InternalEdgePropertyMap.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Initialize an <code>InternalEdgePropertyMap</code> from the given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/InternalEdgePropertyMap.html#/keyPath\">keyPath</a></code>.</p>","parent_name":"InternalEdgePropertyMap"},"Structs/InternalEdgePropertyMap.html#/get(_:_:)":{"name":"get(_:_:)","parent_name":"InternalEdgePropertyMap"},"Structs/InternalVertexPropertyMap.html#/keyPath":{"name":"keyPath","abstract":"<p>The KeyPath between the <code>Graph.Vertex</code> and the <code>Value</code> reterned by the property map.</p>","parent_name":"InternalVertexPropertyMap"},"Structs/InternalVertexPropertyMap.html#/init(_:on:)":{"name":"init(_:on:)","abstract":"<p>Create an <code>InternalVertexPropertyMap</code> for a given keyPath <code>Path</code>.</p>","parent_name":"InternalVertexPropertyMap"},"Structs/InternalVertexPropertyMap.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Initialize an <code>InternalVertexPropertyMap</code> from the given key path.</p>","parent_name":"InternalVertexPropertyMap"},"Structs/InternalVertexPropertyMap.html#/get(_:_:)":{"name":"get(_:_:)","abstract":"<p>Retrieves the property value from <code>graph</code> for <code>vertex</code>.</p>","parent_name":"InternalVertexPropertyMap"},"Protocols/MutablePropertyGraph.html#/addVertex(with:)":{"name":"addVertex(with:)","abstract":"<p>Adds a vertex to the graph.</p>","parent_name":"MutablePropertyGraph"},"Protocols/MutablePropertyGraph.html#/addEdge(from:to:with:)":{"name":"addEdge(from:to:with:)","abstract":"<p>Adds an edge to the graph.</p>","parent_name":"MutablePropertyGraph"},"Protocols/MutablePropertyGraph.html#/addVertex()":{"name":"addVertex()","abstract":"<p>Adds a new vertex to the graph, with a default initialized <code>Vertex</code>.</p>","parent_name":"MutablePropertyGraph"},"Protocols/MutablePropertyGraph.html#/addEdge(from:to:)":{"name":"addEdge(from:to:)","abstract":"<p>Adds an edge from <code>source</code> to <code>destination</code> with a default initialized <code>Edge</code>.</p>","parent_name":"MutablePropertyGraph"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures21PropertyAdjacencyListV8VertexIda":{"name":"VertexId","abstract":"<p>A handle to refer to a vertex in the graph.</p>","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures21PropertyAdjacencyListV6EdgeIda":{"name":"EdgeId","abstract":"<p>A handle to refer to an edge in the graph.</p>","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures21PropertyAdjacencyListVACyxq_q0_Gycfc":{"name":"init()","abstract":"<p>Initialize an empty PropertyAdjacencyList.</p>","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures15VertexListGraphP11vertexCountSivp":{"name":"vertexCount","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures15VertexListGraphP9verticies0C10CollectionQzyF":{"name":"verticies()","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures13EdgeListGraphP9edgeCountSivp":{"name":"edgeCount","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures13EdgeListGraphP5edges0C10CollectionQzyF":{"name":"edges()","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures13EdgeListGraphP6source2of8VertexIdQz0cI0Qz_tF":{"name":"source(of:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures13EdgeListGraphP11destination2of8VertexIdQz0cI0Qz_tF":{"name":"destination(of:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures12MutableGraphP10removeEdge4from2toy8VertexIdQz_AHtKF":{"name":"removeEdge(from:to:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures12MutableGraphP6remove4edgey6EdgeIdQz_tF":{"name":"remove(edge:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures12MutableGraphP11removeEdgesyySb6EdgeIdQzKXEKF":{"name":"removeEdges(_:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures12MutableGraphP11removeEdges4from_y8VertexIdQz_Sb04EdgeI0QzKXEtKF":{"name":"removeEdges(from:_:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures12MutableGraphP5clear6vertexy8VertexIdQz_tF":{"name":"clear(vertex:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures12MutableGraphP6remove6vertexy8VertexIdQz_tF":{"name":"remove(vertex:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures21PropertyAdjacencyListV6vertexxAA0dE0V8VertexIdVyq0__G_tcip":{"name":"subscript(vertex:)","abstract":"<p>Access information associated with a given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/PropertyAdjacencyList.html#/s:17PenguinStructures21PropertyAdjacencyListV8VertexIda\">VertexId</a></code>.</p>","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures13PropertyGraphP6vertex_qd__8VertexIdQz_s7KeyPathCy0F0Qzqd__Gtcluip":{"name":"subscript(vertex:_:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures13PropertyGraphP4edge4EdgeQz0F2IdQz_tcip":{"name":"subscript(edge:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures13PropertyGraphP4edge_qd__6EdgeIdQz_s7KeyPathCy0F0Qzqd__Gtcluip":{"name":"subscript(edge:_:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures20MutablePropertyGraphP9addVertex4with0G2IdQz0G0Qz_tF":{"name":"addVertex(with:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures20MutablePropertyGraphP7addEdge4from2to4with0G2IdQz06VertexK0Qz_AK0G0QztF":{"name":"addEdge(from:to:with:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures14IncidenceGraphP20VertexEdgeCollectionQa":{"name":"VertexEdgeCollection","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures14IncidenceGraphP5edges4from20VertexEdgeCollectionQz0G2IdQz_tF":{"name":"edges(from:)","parent_name":"PropertyAdjacencyList"},"Structs/PropertyAdjacencyList.html#/s:17PenguinStructures14IncidenceGraphP9outDegree2ofSi8VertexIdQz_tF":{"name":"outDegree(of:)","parent_name":"PropertyAdjacencyList"},"Protocols/PropertyGraph.html#/Vertex":{"name":"Vertex","abstract":"<p>The extra information associated with each vertex.</p>","parent_name":"PropertyGraph"},"Protocols/PropertyGraph.html#/Edge":{"name":"Edge","abstract":"<p>The extra information associated with each edge.</p>","parent_name":"PropertyGraph"},"Protocols/PropertyGraph.html#/subscript(vertex:)":{"name":"subscript(vertex:)","abstract":"<p>Access information associated with a given <code>VertexId</code>.</p>","parent_name":"PropertyGraph"},"Protocols/PropertyGraph.html#/subscript(vertex:_:)":{"name":"subscript(vertex:_:)","abstract":"<p>Access a property related to a given vertex.</p>","parent_name":"PropertyGraph"},"Protocols/PropertyGraph.html#/subscript(edge:)":{"name":"subscript(edge:)","abstract":"<p>Access information associated with a given <code>EdgeId</code>.</p>","parent_name":"PropertyGraph"},"Protocols/PropertyGraph.html#/subscript(edge:_:)":{"name":"subscript(edge:_:)","abstract":"<p>Access a property for a given edge.</p>","parent_name":"PropertyGraph"},"Structs/DictionaryEdgePropertyMap.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Initialize <code>self</code> providing <code>values</code> for each edge.</p>","parent_name":"DictionaryEdgePropertyMap"},"Structs/DictionaryEdgePropertyMap.html#/get(_:_:)":{"name":"get(_:_:)","abstract":"<p>Retrieves the value for <code>edge</code> in <code>graph</code>.</p>","parent_name":"DictionaryEdgePropertyMap"},"Structs/DictionaryEdgePropertyMap.html#/set(edge:in:to:)":{"name":"set(edge:in:to:)","abstract":"<p>Sets <code>edge</code> in <code>graph</code> to <code>value</code>.</p>","parent_name":"DictionaryEdgePropertyMap"},"Structs/DictionaryEdgePropertyMap.html#/init(_:for:)":{"name":"init(_:for:)","abstract":"<p>Initializes <code>self</code> using <code>values</code>; <code>graph</code> is unused, but helps type inference along nicely.</p>","parent_name":"DictionaryEdgePropertyMap"},"Structs/TableVertexPropertyMap.html#/init(repeating:count:)":{"name":"init(repeating:count:)","abstract":"<p>Creates an instance where every vertex has value <code>initialValue</code>.</p>","parent_name":"TableVertexPropertyMap"},"Structs/TableVertexPropertyMap.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Creates an instance with <code>values</code>, indexed by the Graph&rsquo;s vertex indicies.</p>","parent_name":"TableVertexPropertyMap"},"Structs/TableVertexPropertyMap.html#/get(_:_:)":{"name":"get(_:_:)","abstract":"<p>Retrieves the <code>Value</code> associated with vertex <code>vertex</code> in <code>graph</code>.</p>","parent_name":"TableVertexPropertyMap"},"Structs/TableVertexPropertyMap.html#/set(vertex:in:to:)":{"name":"set(vertex:in:to:)","abstract":"<p>Sets the property on <code>vertex</code> to <code>value</code>.</p>","parent_name":"TableVertexPropertyMap"},"Structs/TableVertexPropertyMap.html#/init(repeating:for:)":{"name":"init(repeating:for:)","abstract":"<p>Creates an instance where every vertex has <code>initialValue</code> for use with <code>graph</code>.</p>","parent_name":"TableVertexPropertyMap"},"Structs/TableVertexPropertyMap.html#/init(_:for:)":{"name":"init(_:for:)","abstract":"<p>Creates an instance where the verticies have values <code>values</code>.</p>","parent_name":"TableVertexPropertyMap"},"Structs/TableVertexPropertyMap.html#/init(count:)":{"name":"init(count:)","abstract":"<p>Initializes <code>self</code> with the default value for <code>count</code> verticies.</p>","parent_name":"TableVertexPropertyMap"},"Protocols/MutableGraphEdgePropertyMap.html#/set(edge:in:to:)":{"name":"set(edge:in:to:)","abstract":"<p>Sets the property on <code>edge</code> to <code>value</code>.</p>","parent_name":"MutableGraphEdgePropertyMap"},"Protocols/GraphEdgePropertyMap.html#/Graph":{"name":"Graph","abstract":"<p>The graph this PropertyMap operates on.</p>","parent_name":"GraphEdgePropertyMap"},"Protocols/GraphEdgePropertyMap.html#/Value":{"name":"Value","abstract":"<p>The data associated with each edge by this map.</p>","parent_name":"GraphEdgePropertyMap"},"Protocols/GraphEdgePropertyMap.html#/get(_:_:)":{"name":"get(_:_:)","abstract":"<p>Retrieves the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/GraphEdgePropertyMap.html#/Value\">Value</a></code> associated with edge <code>edge</code> in <code>graph</code>.</p>","parent_name":"GraphEdgePropertyMap"},"Protocols/MutableGraphVertexPropertyMap.html#/set(vertex:in:to:)":{"name":"set(vertex:in:to:)","abstract":"<p>Sets the property on <code>vertex</code> to <code>value</code>.</p>","parent_name":"MutableGraphVertexPropertyMap"},"Protocols/GraphVertexPropertyMap.html#/Graph":{"name":"Graph","abstract":"<p>The Graph this PropertyMap operates on.</p>","parent_name":"GraphVertexPropertyMap"},"Protocols/GraphVertexPropertyMap.html#/Value":{"name":"Value","abstract":"<p>The data associated with each vertex by this map.</p>","parent_name":"GraphVertexPropertyMap"},"Protocols/GraphVertexPropertyMap.html#/get(_:_:)":{"name":"get(_:_:)","abstract":"<p>Retrieves the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/GraphVertexPropertyMap.html#/Value\">Value</a></code> associated with vertex <code>vertex</code> in <code>graph</code>.</p>","parent_name":"GraphVertexPropertyMap"},"Protocols/GraphVertexPropertyMap.html":{"name":"GraphVertexPropertyMap","abstract":"<p>Maps a <code>VertexId</code> from a Graph to a property of type <code>Value</code> associated with that <code>VertexId</code>.</p>"},"Protocols/MutableGraphVertexPropertyMap.html":{"name":"MutableGraphVertexPropertyMap","abstract":"<p>Allows modifying the associated vertex data.</p>"},"Protocols/GraphEdgePropertyMap.html":{"name":"GraphEdgePropertyMap","abstract":"<p>Maps an <code>EdgeId</code> from a Graph to a property of type <code>Value</code> associated with that <code>EdgeId</code>.</p>"},"Protocols/MutableGraphEdgePropertyMap.html":{"name":"MutableGraphEdgePropertyMap","abstract":"<p>Allows modifying the associated edge data.</p>"},"Structs/TableVertexPropertyMap.html":{"name":"TableVertexPropertyMap","abstract":"<p>A table-based vertex property map.</p>"},"Protocols/IdIndexable.html":{"name":"IdIndexable","abstract":"<p>An ID that can also be used as an index into a dense, contiguous array.</p>"},"Structs/DictionaryEdgePropertyMap.html":{"name":"DictionaryEdgePropertyMap","abstract":"<p>An external property map backed by a dictionary.</p>"},"Protocols/PropertyGraph.html":{"name":"PropertyGraph","abstract":"<p>A <code>PropertyGraph</code> stores additional information along with the graph structure.</p>"},"Structs/PropertyAdjacencyList.html":{"name":"PropertyAdjacencyList","abstract":"<p>PropertyAdjacencyList is a general-purpose graph implementation with attached data to edges and"},"Protocols/MutablePropertyGraph.html":{"name":"MutablePropertyGraph","abstract":"<p>A <code>MutablePropertyGraph</code> keeps track of additional metadata for each vertex and edge.</p>"},"Structs/InternalVertexPropertyMap.html":{"name":"InternalVertexPropertyMap","abstract":"<p>Defines a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/GraphVertexPropertyMap.html\">GraphVertexPropertyMap</a></code> exposing properties stored in the vertex type of the graph.</p>"},"Structs/InternalEdgePropertyMap.html":{"name":"InternalEdgePropertyMap","abstract":"<p>Defines a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/GraphEdgePropertyMap.html\">GraphEdgePropertyMap</a></code> exposing properties stored in the edge type of the graph.</p>"},"Structs/AdjacencyList/VertexEdgeCollection.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"VertexEdgeCollection"},"Structs/AdjacencyList/VertexEdgeCollection.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"VertexEdgeCollection"},"Structs/AdjacencyList/VertexEdgeCollection.html#/s:Sl5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"VertexEdgeCollection"},"Structs/AdjacencyList/VertexEdgeCollection.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"VertexEdgeCollection"},"Structs/AdjacencyList/EdgeCollection/Cursor.html#/s:SL1loiySbx_xtFZ":{"name":"<(_:_:)","parent_name":"Cursor"},"Structs/AdjacencyList/EdgeCollection/Cursor.html":{"name":"Cursor","parent_name":"EdgeCollection"},"Structs/AdjacencyList/EdgeCollection.html#/s:17PenguinStructures22HierarchicalCollectionP12forEachWhile10startingAt_6CursorQzSgAH_Sb7ElementQzKXEtKF":{"name":"forEachWhile(startingAt:_:)","parent_name":"EdgeCollection"},"Structs/AdjacencyList/EdgeCollection.html#/s:17PenguinStructures22HierarchicalCollectionP5countSivp":{"name":"count","parent_name":"EdgeCollection"},"Structs/AdjacencyList/VertexCollection.html#/s:17PenguinStructures22HierarchicalCollectionP12forEachWhile10startingAt_6CursorQzSgAH_Sb7ElementQzKXEtKF":{"name":"forEachWhile(startingAt:_:)","parent_name":"VertexCollection"},"Structs/AdjacencyList/VertexCollection.html#/s:17PenguinStructures22HierarchicalCollectionP5countSivp":{"name":"count","parent_name":"VertexCollection"},"Structs/AdjacencyList/EdgeId.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"EdgeId"},"Structs/AdjacencyList/VertexId.html#/s:s23CustomStringConvertibleP11descriptionSSvp":{"name":"description","parent_name":"VertexId"},"Structs/AdjacencyList.html#/s:17PenguinStructures13AdjacencyListVACyxGycfc":{"name":"init()","abstract":"<p>Initialize an empty AdjacencyList.</p>","parent_name":"AdjacencyList"},"Structs/AdjacencyList/VertexId.html":{"name":"VertexId","abstract":"<p>A logical pointer into the AdjacencyList for a vertex.</p>","parent_name":"AdjacencyList"},"Structs/AdjacencyList/EdgeId.html":{"name":"EdgeId","abstract":"<p>A logical pointer into the AdjacencyList for an edge.</p>","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures12MutableGraphP7addEdge4from2to0F2IdQz06VertexI0Qz_AJtKF":{"name":"addEdge(from:to:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures12MutableGraphP10removeEdge4from2toy8VertexIdQz_AHtKF":{"name":"removeEdge(from:to:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures12MutableGraphP6remove4edgey6EdgeIdQz_tF":{"name":"remove(edge:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures12MutableGraphP11removeEdgesyySb6EdgeIdQzKXEKF":{"name":"removeEdges(_:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures12MutableGraphP11removeEdges4from_y8VertexIdQz_Sb04EdgeI0QzKXEtKF":{"name":"removeEdges(from:_:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures12MutableGraphP9addVertex0F2IdQzyF":{"name":"addVertex()","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures12MutableGraphP5clear6vertexy8VertexIdQz_tF":{"name":"clear(vertex:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures12MutableGraphP6remove6vertexy8VertexIdQz_tF":{"name":"remove(vertex:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures15VertexListGraphP11vertexCountSivp":{"name":"vertexCount","parent_name":"AdjacencyList"},"Structs/AdjacencyList/VertexCollection.html":{"name":"VertexCollection","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures15VertexListGraphP9verticies0C10CollectionQzyF":{"name":"verticies()","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures13EdgeListGraphP9edgeCountSivp":{"name":"edgeCount","parent_name":"AdjacencyList"},"Structs/AdjacencyList/EdgeCollection.html":{"name":"EdgeCollection","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures13EdgeListGraphP5edges0C10CollectionQzyF":{"name":"edges()","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures13EdgeListGraphP6source2of8VertexIdQz0cI0Qz_tF":{"name":"source(of:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures13EdgeListGraphP11destination2of8VertexIdQz0cI0Qz_tF":{"name":"destination(of:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList/VertexEdgeCollection.html":{"name":"VertexEdgeCollection","abstract":"<p><code>VertexEdgeCollection</code> represents a collection of verticies from a single source vertex.</p>","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures14IncidenceGraphP5edges4from20VertexEdgeCollectionQz0G2IdQz_tF":{"name":"edges(from:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html#/s:17PenguinStructures14IncidenceGraphP9outDegree2ofSi8VertexIdQz_tF":{"name":"outDegree(of:)","parent_name":"AdjacencyList"},"Structs/AdjacencyList.html":{"name":"AdjacencyList","abstract":"<p>AdjacencyList is a general-purpose, basic graph implementation.</p>"},"Structs/PredecessorVisitor.html#/s:17PenguinStructures18PredecessorVisitorV12predecessorsSay8VertexIdQzSgGvp":{"name":"predecessors","abstract":"<p>A table of the predecessor for a vertex, organized by <code>Graph.VertexId.index</code>.</p>","parent_name":"PredecessorVisitor"},"Structs/PredecessorVisitor.html#/s:17PenguinStructures18PredecessorVisitorV11vertexCountACyxGSi_tcfc":{"name":"init(vertexCount:)","abstract":"<p>Creates a PredecessorVisitor for use on graph <code>Graph</code> with <code>vertexCount</code> verticies.</p>","parent_name":"PredecessorVisitor"},"Structs/PredecessorVisitor.html#/s:17PenguinStructures18PredecessorVisitorV8treeEdgeyy0F2IdQz_xztF":{"name":"treeEdge(_:_:)","abstract":"<p>Records the source of <code>edge</code> as being the predecessor of the destination of <code>edge</code>.</p>","parent_name":"PredecessorVisitor"},"Structs/PredecessorVisitor.html#/s:17PenguinStructures18PredecessorVisitorVA2A15VertexListGraphRzrlE3forACyxGx_tcfc":{"name":"init(for:)","abstract":"<p>Creates a <code>PredecessorVisitor</code> for use on <code>graph</code>.</p>","parent_name":"PredecessorVisitor"},"Structs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV4headq_vp":{"name":"head","abstract":"<p>The head of the chain.</p>","parent_name":"DijkstraVisitorChain"},"Structs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV4tailq0_vp":{"name":"tail","abstract":"<p>The tail of the chain.</p>","parent_name":"DijkstraVisitorChain"},"Structs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainVyACyxq_q0_Gq__q0_tcfc":{"name":"init(_:_:)","abstract":"<p>Initialize <code>self</code> with <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV4headq_vp\">head</a></code> and <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV4tailq0_vp\">tail</a></code>.</p>","parent_name":"DijkstraVisitorChain"},"Structs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV8discover6vertex_y8VertexIdQz_xztF":{"name":"discover(vertex:_:)","abstract":"<p>Called upon first discovering <code>vertex</code> in the graph.</p>","parent_name":"DijkstraVisitorChain"},"Structs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV7examine6vertex_y8VertexIdQz_xztF":{"name":"examine(vertex:_:)","abstract":"<p>Called when <code>vertex</code> is at the front of the priority queue and is examined.</p>","parent_name":"DijkstraVisitorChain"},"Structs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV7examine4edge_y6EdgeIdQz_xztF":{"name":"examine(edge:_:)","abstract":"<p>Called for each edge associated when examining a vertex.</p>","parent_name":"DijkstraVisitorChain"},"Structs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV11edgeRelaxedyy6EdgeIdQz_xztF":{"name":"edgeRelaxed(_:_:)","abstract":"<p>Called for each edge that results in a shorter path to its destination vertex.</p>","parent_name":"DijkstraVisitorChain"},"Structs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV14edgeNotRelaxedyy6EdgeIdQz_xztF":{"name":"edgeNotRelaxed(_:_:)","abstract":"<p>Called for each edge that does not result in a shorter path to its destination vertex.</p>","parent_name":"DijkstraVisitorChain"},"Structs/DijkstraVisitorChain.html#/s:17PenguinStructures20DijkstraVisitorChainV6finish6vertex_y8VertexIdQz_xztF":{"name":"finish(vertex:_:)","abstract":"<p>Called once for each vertex right after it is colored black.</p>","parent_name":"DijkstraVisitorChain"},"Structs/DijkstraBFSVisitor.html#/s:17PenguinStructures10BFSVisitorP9popVertex5Graph_0E2IdQZSgyF":{"name":"popVertex()","parent_name":"DijkstraBFSVisitor"},"Structs/DijkstraBFSVisitor.html#/s:17PenguinStructures10BFSVisitorP8discover6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"discover(vertex:_:)","parent_name":"DijkstraBFSVisitor"},"Structs/DijkstraBFSVisitor.html#/s:17PenguinStructures10BFSVisitorP7examine6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"examine(vertex:_:)","parent_name":"DijkstraBFSVisitor"},"Structs/DijkstraBFSVisitor.html#/s:17PenguinStructures10BFSVisitorP7examine4edge_y5Graph_6EdgeIdQZ_AFQzztF":{"name":"examine(edge:_:)","parent_name":"DijkstraBFSVisitor"},"Structs/DijkstraBFSVisitor.html#/s:17PenguinStructures10BFSVisitorP8treeEdgeyy5Graph_0E2IdQZ_AEQzztF":{"name":"treeEdge(_:_:)","parent_name":"DijkstraBFSVisitor"},"Structs/DijkstraBFSVisitor.html#/s:17PenguinStructures10BFSVisitorP15grayDestinationyy5Graph_6EdgeIdQZ_AEQzztF":{"name":"grayDestination(_:_:)","parent_name":"DijkstraBFSVisitor"},"Structs/DijkstraBFSVisitor.html#/s:17PenguinStructures10BFSVisitorP16blackDestinationyy5Graph_6EdgeIdQZ_AEQzztF":{"name":"blackDestination(_:_:)","parent_name":"DijkstraBFSVisitor"},"Structs/DijkstraBFSVisitor.html#/s:17PenguinStructures10BFSVisitorP6finish6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"finish(vertex:_:)","parent_name":"DijkstraBFSVisitor"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainV4headq_vp":{"name":"head","abstract":"<p>The first visitor in the chain.</p>","parent_name":"DFSVisitorChain"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainV4tailq0_vp":{"name":"tail","abstract":"<p>The rest of the chain.</p>","parent_name":"DFSVisitorChain"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainVyACyxq_q0_Gq__q0_tcfc":{"name":"init(_:_:)","abstract":"<p>Builds a chain of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/DFSVisitor.html\">DFSVisitor</a></code>s, composed of <code>Head</code>, and <code>Tail</code>.</p>","parent_name":"DFSVisitorChain"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainV5start6vertex_y8VertexIdQz_xztF":{"name":"start(vertex:_:)","abstract":"<p><code>start(vertex:_:)</code> is called once, passing in the vertex where search will begin.</p>","parent_name":"DFSVisitorChain"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainV8discover6vertex_Sb8VertexIdQz_xztF":{"name":"discover(vertex:_:)","abstract":"<p><code>discover(vertex:_:)</code> is called upon first discovering <code>vertex</code> in the graph.</p>","parent_name":"DFSVisitorChain"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainV7examine4edge_y6EdgeIdQz_xztF":{"name":"examine(edge:_:)","abstract":"<p>Called for each edge associated with a freshly discovered vertex.</p>","parent_name":"DFSVisitorChain"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainV8treeEdgeyy0F2IdQz_xztF":{"name":"treeEdge(_:_:)","abstract":"<p>Called for each edge that discovers a new vertex.</p>","parent_name":"DFSVisitorChain"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainV8backEdgeyy0F2IdQz_xztF":{"name":"backEdge(_:_:)","abstract":"<p>Called for each back edge in the search tree.</p>","parent_name":"DFSVisitorChain"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainV18forwardOrCrossEdgeyy0H2IdQz_xztF":{"name":"forwardOrCrossEdge(_:_:)","abstract":"<p>Called for edges that are forward or cross edges in the search tree.</p>","parent_name":"DFSVisitorChain"},"Structs/DFSVisitorChain.html#/s:17PenguinStructures15DFSVisitorChainV6finish6vertex_y8VertexIdQz_xztF":{"name":"finish(vertex:_:)","abstract":"<p>Called once for each vertex right after it is colored black.</p>","parent_name":"DFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV4headq_vp":{"name":"head","abstract":"<p>The first visitor in the chain.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV4tailq0_vp":{"name":"tail","abstract":"<p>The rest of the chain.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainVyACyxq_q0_Gq__q0_tcfc":{"name":"init(_:_:)","abstract":"<p>Initialize a chain.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV8discover6vertex_y8VertexIdQz_xztF":{"name":"discover(vertex:_:)","abstract":"<p>Called upon first discovering <code>vertex</code> in the graph.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV9popVertex0F2IdQzSgyF":{"name":"popVertex()","abstract":"<p>Retrieves the next vertex to visit.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV7examine6vertex_y8VertexIdQz_xztF":{"name":"examine(vertex:_:)","abstract":"<p>Called when <code>vertex</code> is at the front of the queue and is examined.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV7examine4edge_y6EdgeIdQz_xztF":{"name":"examine(edge:_:)","abstract":"<p>Called for each edge associated with a freshly discovered vertex.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV8treeEdgeyy0F2IdQz_xztF":{"name":"treeEdge(_:_:)","abstract":"<p>Called for each edge that forms the search tree.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV11nonTreeEdgeyy0G2IdQz_xztF":{"name":"nonTreeEdge(_:_:)","abstract":"<p>Called for each non-tree edge encountered.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV15grayDestinationyy6EdgeIdQz_xztF":{"name":"grayDestination(_:_:)","abstract":"<p>Called for each edge with a gray destination</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV16blackDestinationyy6EdgeIdQz_xztF":{"name":"blackDestination(_:_:)","abstract":"<p>Called for each edge with a black destination.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSVisitorChain.html#/s:17PenguinStructures15BFSVisitorChainV6finish6vertex_y8VertexIdQz_xztF":{"name":"finish(vertex:_:)","abstract":"<p>Called once for each vertex right after it is colored black.</p>","parent_name":"BFSVisitorChain"},"Structs/BFSQueueVisitor.html#/s:17PenguinStructures15BFSQueueVisitorVACyxGycfc":{"name":"init()","abstract":"<p>Initialize an empty <code>BFSQueueVisitor</code>.</p>","parent_name":"BFSQueueVisitor"},"Structs/BFSQueueVisitor.html#/s:17PenguinStructures15BFSQueueVisitorV8discover6vertex_y8VertexIdQz_xztF":{"name":"discover(vertex:_:)","abstract":"<p>Called upon first discovering <code>vertex</code> in the graph.</p>","parent_name":"BFSQueueVisitor"},"Structs/BFSQueueVisitor.html#/s:17PenguinStructures15BFSQueueVisitorV9popVertex0F2IdQzSgyF":{"name":"popVertex()","abstract":"<p>Retrieves the next vertex to visit.</p>","parent_name":"BFSQueueVisitor"},"Protocols/GraphDistanceMeasure.html#/s:17PenguinStructures20GraphDistanceMeasureP17effectiveInfinityxvpZ":{"name":"effectiveInfinity","abstract":"<p>A value that is effectively always higher than any reasonable possible distance within the","parent_name":"GraphDistanceMeasure"},"Protocols/DijkstraVisitor.html#/s:17PenguinStructures15DijkstraVisitorP5GraphQa":{"name":"Graph","abstract":"<p>The graph data structure this <code>DijkstraVisitor</code> will traverse.</p>","parent_name":"DijkstraVisitor"},"Protocols/DijkstraVisitor.html#/s:17PenguinStructures15DijkstraVisitorP8discover6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"discover(vertex:_:)","abstract":"<p>Called upon first discovering <code>vertex</code> in the graph.</p>","parent_name":"DijkstraVisitor"},"Protocols/DijkstraVisitor.html#/s:17PenguinStructures15DijkstraVisitorP7examine6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"examine(vertex:_:)","abstract":"<p>Called when <code>vertex</code> is at the front of the priority queue and is examined.</p>","parent_name":"DijkstraVisitor"},"Protocols/DijkstraVisitor.html#/s:17PenguinStructures15DijkstraVisitorP7examine4edge_y5Graph_6EdgeIdQZ_AFQzztF":{"name":"examine(edge:_:)","abstract":"<p>Called for each edge associated when examining a vertex.</p>","parent_name":"DijkstraVisitor"},"Protocols/DijkstraVisitor.html#/s:17PenguinStructures15DijkstraVisitorP11edgeRelaxedyy5Graph_6EdgeIdQZ_AEQzztF":{"name":"edgeRelaxed(_:_:)","abstract":"<p>Called for each edge that results in a shorter path to its destination vertex.</p>","parent_name":"DijkstraVisitor"},"Protocols/DijkstraVisitor.html#/s:17PenguinStructures15DijkstraVisitorP14edgeNotRelaxedyy5Graph_6EdgeIdQZ_AEQzztF":{"name":"edgeNotRelaxed(_:_:)","abstract":"<p>Called for each edge that does not result in a shorter path to its destination vertex.</p>","parent_name":"DijkstraVisitor"},"Protocols/DijkstraVisitor.html#/s:17PenguinStructures15DijkstraVisitorP6finish6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"finish(vertex:_:)","abstract":"<p>Called once for each vertex right after it is colored black.</p>","parent_name":"DijkstraVisitor"},"Protocols/DFSVisitor.html#/s:17PenguinStructures10DFSVisitorP5GraphQa":{"name":"Graph","abstract":"<p>The type of Graph this <code>DFSVisitor</code> will be traversing.</p>","parent_name":"DFSVisitor"},"Protocols/DFSVisitor.html#/s:17PenguinStructures10DFSVisitorP5start6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"start(vertex:_:)","abstract":"<p><code>start(vertex:_:)</code> is called once, passing in the vertex where search will begin.</p>","parent_name":"DFSVisitor"},"Protocols/DFSVisitor.html#/s:17PenguinStructures10DFSVisitorP8discover6vertex_Sb5Graph_8VertexIdQZ_AFQzztF":{"name":"discover(vertex:_:)","abstract":"<p><code>discover(vertex:_:)</code> is called upon first discovering <code>vertex</code> in the graph.</p>","parent_name":"DFSVisitor"},"Protocols/DFSVisitor.html#/s:17PenguinStructures10DFSVisitorP7examine4edge_y5Graph_6EdgeIdQZ_AFQzztF":{"name":"examine(edge:_:)","abstract":"<p>Called for each edge associated with a freshly discovered vertex.</p>","parent_name":"DFSVisitor"},"Protocols/DFSVisitor.html#/s:17PenguinStructures10DFSVisitorP8treeEdgeyy5Graph_0E2IdQZ_AEQzztF":{"name":"treeEdge(_:_:)","abstract":"<p>Called for each edge that discovers a new vertex.</p>","parent_name":"DFSVisitor"},"Protocols/DFSVisitor.html#/s:17PenguinStructures10DFSVisitorP8backEdgeyy5Graph_0E2IdQZ_AEQzztF":{"name":"backEdge(_:_:)","abstract":"<p>Called for each back edge in the search tree.</p>","parent_name":"DFSVisitor"},"Protocols/DFSVisitor.html#/s:17PenguinStructures10DFSVisitorP18forwardOrCrossEdgeyy5Graph_0G2IdQZ_AEQzztF":{"name":"forwardOrCrossEdge(_:_:)","abstract":"<p>Called for edges that are forward or cross edges in the search tree.</p>","parent_name":"DFSVisitor"},"Protocols/DFSVisitor.html#/s:17PenguinStructures10DFSVisitorP6finish6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"finish(vertex:_:)","abstract":"<p>Called once for each vertex right after it is colored black.</p>","parent_name":"DFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP5GraphQa":{"name":"Graph","abstract":"<p>The graph datastructure this <code>BFSVisitor</code> will traverse.</p>","parent_name":"BFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP8discover6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"discover(vertex:_:)","abstract":"<p>Called upon first discovering <code>vertex</code> in the graph.</p>","parent_name":"BFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP9popVertex5Graph_0E2IdQZSgyF":{"name":"popVertex()","abstract":"<p>Retrieves the next vertex to visit.</p>","parent_name":"BFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP7examine6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"examine(vertex:_:)","abstract":"<p>Called when <code>vertex</code> is at the front of the queue and is examined.</p>","parent_name":"BFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP7examine4edge_y5Graph_6EdgeIdQZ_AFQzztF":{"name":"examine(edge:_:)","abstract":"<p>Called for each edge associated with a freshly discovered vertex.</p>","parent_name":"BFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP8treeEdgeyy5Graph_0E2IdQZ_AEQzztF":{"name":"treeEdge(_:_:)","abstract":"<p>Called for each edge that forms the search tree.</p>","parent_name":"BFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP11nonTreeEdgeyy5Graph_0F2IdQZ_AEQzztF":{"name":"nonTreeEdge(_:_:)","abstract":"<p>Called for each non-tree edge encountered.</p>","parent_name":"BFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP15grayDestinationyy5Graph_6EdgeIdQZ_AEQzztF":{"name":"grayDestination(_:_:)","abstract":"<p>Called for each edge with a gray destination.</p>","parent_name":"BFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP16blackDestinationyy5Graph_6EdgeIdQZ_AEQzztF":{"name":"blackDestination(_:_:)","abstract":"<p>Called for each edge with a black destination.</p>","parent_name":"BFSVisitor"},"Protocols/BFSVisitor.html#/s:17PenguinStructures10BFSVisitorP6finish6vertex_y5Graph_8VertexIdQZ_AFQzztF":{"name":"finish(vertex:_:)","abstract":"<p>Called once for each vertex right after it is colored black.</p>","parent_name":"BFSVisitor"},"Enums/VertexColor.html#/s:17PenguinStructures11VertexColorO5whiteyA2CmF":{"name":"white","abstract":"<p>white is used for unseen verticies in the graph.</p>","parent_name":"VertexColor"},"Enums/VertexColor.html#/s:17PenguinStructures11VertexColorO4grayyA2CmF":{"name":"gray","abstract":"<p>gray is used for verticies that are being processed.</p>","parent_name":"VertexColor"},"Enums/VertexColor.html#/s:17PenguinStructures11VertexColorO5blackyA2CmF":{"name":"black","abstract":"<p>black is used for verticies that have finished processing.</p>","parent_name":"VertexColor"},"Extensions/Graphs.html#/topologicalSort(_:)":{"name":"topologicalSort(_:)","abstract":"<p>Computes a topological sort of <code>graph</code>.</p>","parent_name":"Graphs"},"Enums/Graphs.html#/s:17PenguinStructures6GraphsO24breadthFirstSearchNoInit_7visitor8colorMap7startAtyxz_q_zq0_zq1_tAA14IncidenceGraphRzAA010VertexListO0Rz0O0Qy_RszAA10BFSVisitorR_AA07Mutableop8PropertyK0R0_SlR1_7ElementQy1_0P2IdAA0O8ProtocolPRtzAJQy0_AKRSAA0P5ColorO5ValueRt0_r2_lFZ":{"name":"breadthFirstSearchNoInit(_:visitor:colorMap:startAt:)","abstract":"<p>Runs breadth first search on <code>graph</code> using <code>colorMap</code> to keep track of search progress, and","parent_name":"Graphs"},"Enums/Graphs.html#/s:17PenguinStructures6GraphsO22depthFirstSearchNoInit_8colorMap7visitor5startyxz_q_zq0_z8VertexIdAA13GraphProtocolPQztAA09IncidenceO0RzAA0m4ListO0Rz0O0Qy_RszAA07Mutableom8PropertyJ0R_AA10DFSVisitorR0_ANQy0_AORSAA0M5ColorO5ValueRt_r1_lFZ":{"name":"depthFirstSearchNoInit(_:colorMap:visitor:start:)","abstract":"<p>Runs depth first search on <code>graph</code> starting at <code>startVertex</code> using <code>colorMap</code> to keep track of","parent_name":"Graphs"},"Enums/Graphs.html#/s:17PenguinStructures6GraphsO19depthFirstTraversal_7visitoryxz_q_ztAA14IncidenceGraphRzAA010VertexListI0Rz0I0Qy_RszAA10DFSVisitorR_AA11IdIndexable0jM0AA0I8ProtocolPRpzr0_lFZ":{"name":"depthFirstTraversal(_:visitor:)","abstract":"<p>Runs depth first search repeatedly until all verticies have been visited.</p>","parent_name":"Graphs"},"Enums/Graphs.html#/s:17PenguinStructures6GraphsO20dijkstraSearchNoInit_7visitor8colorMap014vertexDistanceJ0010edgeWeightJ07startAtyxz_q3_zq2_zq1_zq0_8VertexIdAA13GraphProtocolPQztAA09IncidenceS0RzAA0q4ListS0Rz0S0Qy0_RszAA0sL7MeasureR_5ValueQy0_Rs_AA0s12EdgePropertyJ0R0_AA07MutablesqzJ0R1_AaVR2_AA15DijkstraVisitorR3_AA0R9IndexableAMRQAPQy1_AQRSASQy1_ATRSAPQy2_AYRSAPQy3_A_RSAA0Q5ColorOASRt2_r4_lFZ":{"name":"dijkstraSearchNoInit(_:visitor:colorMap:vertexDistanceMap:edgeWeightMap:startAt:)","abstract":"<p>Executes Dijkstra&rsquo;s graph search algorithm, without initializing any data structures.</p>","parent_name":"Graphs"},"Enums/Graphs.html#/s:17PenguinStructures6GraphsO14dijkstraSearch_7visitor13edgeWeightMap7startAtAA019TableVertexPropertyI0Vyxq_Gxz_q1_zq0_0M2IdAA13GraphProtocolPQztAA09IncidenceP0RzAA0m4ListP0Rz0P0Qy0_RszAA0P15DistanceMeasureR_5ValueQy0_Rs_AA0p4EdgenI0R0_AA15DijkstraVisitorR1_AA0O9IndexableANRQAQQy1_ARRSr2_lFZ":{"name":"dijkstraSearch(_:visitor:edgeWeightMap:startAt:)","abstract":"<p>Executes Dijkstra&rsquo;s search algorithm over <code>graph</code> from <code>startVertex</code> using edge weights from","parent_name":"Graphs"},"Enums/Graphs.html":{"name":"Graphs","abstract":"<p>A namespace for graph-related functions.</p>"},"Extensions/Graphs.html":{"name":"Graphs"},"Enums/VertexColor.html":{"name":"VertexColor","abstract":"<p><code>VertexColor</code> is used to represent which verticies have been seen during graph searches.</p>"},"Protocols/BFSVisitor.html":{"name":"BFSVisitor","abstract":"<p>A visitor to capture state during a breadth first search of a graph.</p>"},"Protocols/DFSVisitor.html":{"name":"DFSVisitor","abstract":"<p>DFSVisitor is used to extract information while executing depth first search.</p>"},"Protocols/DijkstraVisitor.html":{"name":"DijkstraVisitor","abstract":"<p>A visitor ot capture state during a Dijkstra search of a graph.</p>"},"Protocols/GraphDistanceMeasure.html":{"name":"GraphDistanceMeasure","abstract":"<p>Represents a distance measure on a graph.</p>"},"Structs/BFSQueueVisitor.html":{"name":"BFSQueueVisitor","abstract":"<p>The BFSVisitor that implements breadth first search.</p>"},"Structs/BFSVisitorChain.html":{"name":"BFSVisitorChain","abstract":"<p>Chains two <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/BFSVisitor.html\">BFSVisitor</a></code>s together in HList-style.</p>"},"Structs/DFSVisitorChain.html":{"name":"DFSVisitorChain","abstract":"<p>Chains two <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/DFSVisitor.html\">DFSVisitor</a></code>s together in HList-style.</p>"},"Structs/DijkstraBFSVisitor.html":{"name":"DijkstraBFSVisitor","abstract":"<p>Implements the majority of Dijkstra&rsquo;s algorithm in terms of BreadthFirstSearch.</p>"},"Structs/DijkstraVisitorChain.html":{"name":"DijkstraVisitorChain","abstract":"<p>Chains two <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/DijkstraVisitor.html\">DijkstraVisitor</a></code>s together to form an HList-style chain.</p>"},"Structs/PredecessorVisitor.html":{"name":"PredecessorVisitor","abstract":"<p>A DFSVisitor that records the parents of every discovered vertex.</p>"},"Protocols/MutableGraph.html#/s:17PenguinStructures12MutableGraphP7addEdge4from2to0F2IdQz06VertexI0Qz_AJtKF":{"name":"addEdge(from:to:)","abstract":"<p>Adds an edge from <code>source</code> to <code>destination</code> into the graph.</p>","parent_name":"MutableGraph"},"Protocols/MutableGraph.html#/s:17PenguinStructures12MutableGraphP10removeEdge4from2toy8VertexIdQz_AHtKF":{"name":"removeEdge(from:to:)","abstract":"<p>Removes the edge (u, v) from the graph.</p>","parent_name":"MutableGraph"},"Protocols/MutableGraph.html#/s:17PenguinStructures12MutableGraphP6remove4edgey6EdgeIdQz_tF":{"name":"remove(edge:)","abstract":"<p>Removes the edge <code>edge</code> from the graph.</p>","parent_name":"MutableGraph"},"Protocols/MutableGraph.html#/s:17PenguinStructures12MutableGraphP11removeEdgesyySb6EdgeIdQzKXEKF":{"name":"removeEdges(_:)","abstract":"<p>Removes all edges that satisfy the given predicate.</p>","parent_name":"MutableGraph"},"Protocols/MutableGraph.html#/s:17PenguinStructures12MutableGraphP11removeEdges4from_y8VertexIdQz_Sb04EdgeI0QzKXEtKF":{"name":"removeEdges(from:_:)","abstract":"<p>Remove all out edges from <code>node</code> that satisfy the given predicate.</p>","parent_name":"MutableGraph"},"Protocols/MutableGraph.html#/s:17PenguinStructures12MutableGraphP9addVertex0F2IdQzyF":{"name":"addVertex()","abstract":"<p>Adds a new vertex to the graph, and returns a <code>VertexId</code>.</p>","parent_name":"MutableGraph"},"Protocols/MutableGraph.html#/s:17PenguinStructures12MutableGraphP5clear6vertexy8VertexIdQz_tF":{"name":"clear(vertex:)","abstract":"<p>Removes all edges from a given vertex.</p>","parent_name":"MutableGraph"},"Protocols/MutableGraph.html#/s:17PenguinStructures12MutableGraphP6remove6vertexy8VertexIdQz_tF":{"name":"remove(vertex:)","abstract":"<p>Removes <code>vertex</code> from the graph.</p>","parent_name":"MutableGraph"},"Protocols/MutableGraph.html#/s:17PenguinStructures12MutableGraphPAAE20removedEdgeIfPresent4from2toy8VertexIdQz_AHtF":{"name":"removedEdgeIfPresent(from:to:)","abstract":"<p>Removes the edge from <code>u</code> to <code>v</code> if present, and does nothing otherwise.</p>","parent_name":"MutableGraph"},"Protocols/EdgeListGraph.html#/s:17PenguinStructures13EdgeListGraphP0C10CollectionQa":{"name":"EdgeCollection","abstract":"<p>The collection of all edges.</p>","parent_name":"EdgeListGraph"},"Protocols/EdgeListGraph.html#/s:17PenguinStructures13EdgeListGraphP9edgeCountSivp":{"name":"edgeCount","abstract":"<p>The total number of edges within the graph.</p>","parent_name":"EdgeListGraph"},"Protocols/EdgeListGraph.html#/s:17PenguinStructures13EdgeListGraphP5edges0C10CollectionQzyF":{"name":"edges()","abstract":"<p>A collection of edges.</p>","parent_name":"EdgeListGraph"},"Protocols/EdgeListGraph.html#/s:17PenguinStructures13EdgeListGraphP6source2of8VertexIdQz0cI0Qz_tF":{"name":"source(of:)","abstract":"<p>Returns the source <code>VertexId</code> of <code>edge</code>.</p>","parent_name":"EdgeListGraph"},"Protocols/EdgeListGraph.html#/s:17PenguinStructures13EdgeListGraphP11destination2of8VertexIdQz0cI0Qz_tF":{"name":"destination(of:)","abstract":"<p>Returns the source <code>VertexId</code> of <code>edge</code>.</p>","parent_name":"EdgeListGraph"},"Protocols/VertexListGraph.html#/s:17PenguinStructures15VertexListGraphP0C10CollectionQa":{"name":"VertexCollection","abstract":"<p>The collection of all verticies.</p>","parent_name":"VertexListGraph"},"Protocols/VertexListGraph.html#/s:17PenguinStructures15VertexListGraphP11vertexCountSivp":{"name":"vertexCount","abstract":"<p>The total number of verticies in the graph.</p>","parent_name":"VertexListGraph"},"Protocols/VertexListGraph.html#/s:17PenguinStructures15VertexListGraphP9verticies0C10CollectionQzyF":{"name":"verticies()","abstract":"<p>A collection of verticies.</p>","parent_name":"VertexListGraph"},"Protocols/IncidenceGraph.html#/s:17PenguinStructures14IncidenceGraphP20VertexEdgeCollectionQa":{"name":"VertexEdgeCollection","abstract":"<p>The collection of edges originating from a given vertex.</p>","parent_name":"IncidenceGraph"},"Protocols/IncidenceGraph.html#/s:17PenguinStructures14IncidenceGraphP5edges4from20VertexEdgeCollectionQz0G2IdQz_tF":{"name":"edges(from:)","abstract":"<p>Computes the collection of edges from <code>vertex</code>.</p>","parent_name":"IncidenceGraph"},"Protocols/IncidenceGraph.html#/s:17PenguinStructures14IncidenceGraphP6source2of8VertexIdQz04EdgeH0Qz_tF":{"name":"source(of:)","abstract":"<p>Returns the source <code>VertexId</code> of <code>edge</code>.</p>","parent_name":"IncidenceGraph"},"Protocols/IncidenceGraph.html#/s:17PenguinStructures14IncidenceGraphP11destination2of8VertexIdQz04EdgeH0Qz_tF":{"name":"destination(of:)","abstract":"<p>Returns the source <code>VertexId</code> of <code>edge</code>.</p>","parent_name":"IncidenceGraph"},"Protocols/IncidenceGraph.html#/s:17PenguinStructures14IncidenceGraphP9outDegree2ofSi8VertexIdQz_tF":{"name":"outDegree(of:)","abstract":"<p>Computes the out-degree of <code>vertex</code>.</p>","parent_name":"IncidenceGraph"},"Protocols/GraphProtocol.html#/s:17PenguinStructures13GraphProtocolP8VertexIdQa":{"name":"VertexId","abstract":"<p>A handle to refer to a vertex in the graph.</p>","parent_name":"GraphProtocol"},"Protocols/GraphProtocol.html#/s:17PenguinStructures13GraphProtocolP6EdgeIdQa":{"name":"EdgeId","abstract":"<p>A handle to rever to an edge in the graph.</p>","parent_name":"GraphProtocol"},"Protocols/GraphProtocol.html":{"name":"GraphProtocol","abstract":"<p>Represents a Graph data structure.</p>"},"Protocols/IncidenceGraph.html":{"name":"IncidenceGraph","abstract":"<p>A graph that allows retrieval of edges from a given node.</p>"},"Protocols/VertexListGraph.html":{"name":"VertexListGraph","abstract":"<p>A <code>VertexListGraph</code> is a graph that can enumerate all the verticies within it.</p>"},"Protocols/EdgeListGraph.html":{"name":"EdgeListGraph","abstract":"<p>An <code>EdgeListGraph</code> is a graph that can enumerate all edges within it.</p>"},"Protocols/MutableGraph.html":{"name":"MutableGraph","abstract":"<p>A <code>MutableGraph</code> can be changed via the addition and removal of edges and vertices.</p>"},"Structs/LeafArray.html#/Cursor":{"name":"Cursor","parent_name":"LeafArray"},"Structs/LeafArray.html#/init(_:)":{"name":"init(_:)","abstract":"<p>Wrap <code>array</code> to form a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/HierarchicalCollection.html\">HierarchicalCollection</a></code>.</p>","parent_name":"LeafArray"},"Structs/LeafArray.html#/forEachWhile(startingAt:_:)":{"name":"forEachWhile(startingAt:_:)","parent_name":"LeafArray"},"Structs/LeafArray.html#/flatten()":{"name":"flatten()","parent_name":"LeafArray"},"Structs/LeafArray.html#/flatten(into:)":{"name":"flatten(into:)","parent_name":"LeafArray"},"Structs/LeafArray.html#/mapAndFlatten(_:)":{"name":"mapAndFlatten(_:)","parent_name":"LeafArray"},"Structs/LeafArray.html#/compactMapAndFlatten(_:)":{"name":"compactMapAndFlatten(_:)","parent_name":"LeafArray"},"Structs/LeafArray.html#/count":{"name":"count","parent_name":"LeafArray"},"Structs/HierarchicalArray/Cursor.html#/<(_:_:)":{"name":"<(_:_:)","parent_name":"Cursor"},"Structs/HierarchicalArray.html#/Element":{"name":"Element","parent_name":"HierarchicalArray"},"Structs/HierarchicalArray/Cursor.html":{"name":"Cursor","parent_name":"HierarchicalArray"},"Structs/HierarchicalArray.html#/init(_:)":{"name":"init(_:)","parent_name":"HierarchicalArray"},"Structs/HierarchicalArray.html#/forEachWhile(startingAt:_:)":{"name":"forEachWhile(startingAt:_:)","parent_name":"HierarchicalArray"},"Structs/HierarchicalArray.html#/flatten(into:)":{"name":"flatten(into:)","parent_name":"HierarchicalArray"},"Structs/HierarchicalArray.html#/compactMapAndFlatten(_:)":{"name":"compactMapAndFlatten(_:)","parent_name":"HierarchicalArray"},"Structs/HierarchicalArray.html#/count":{"name":"count","parent_name":"HierarchicalArray"},"Structs/ConfigurableHeap.html#/Cursor":{"name":"Cursor","abstract":"<p>A logical pointer into the <code>ConfigurableHeap</code>&lsquo;s internal data structures.</p>","parent_name":"ConfigurableHeap"},"Structs/ConfigurableHeap.html#/init(indexer:)":{"name":"init(indexer:)","abstract":"<p>Initialize an empty heap using <code>indexer</code> for indexing.</p>","parent_name":"ConfigurableHeap"},"Structs/ConfigurableHeap.html#/count":{"name":"count","abstract":"<p>The number of elements</p>","parent_name":"ConfigurableHeap"},"Structs/ConfigurableHeap.html#/isEmpty":{"name":"isEmpty","abstract":"<p>True iff there are no elements within <code>self</code>.</p>","parent_name":"ConfigurableHeap"},"Structs/ConfigurableHeap.html#/add(_:with:)":{"name":"add(_:with:)","abstract":"<p>Adds <code>elem</code> with the specified <code>priority</code> to <code>self</code>.</p>","parent_name":"ConfigurableHeap"},"Structs/ConfigurableHeap.html#/popFront()":{"name":"popFront()","abstract":"<p>Removes and returns the element with the smallest <code>priority</code> value from <code>self</code>.</p>","parent_name":"ConfigurableHeap"},"Structs/ConfigurableHeap.html#/popFrontWithPriority()":{"name":"popFrontWithPriority()","abstract":"<p>Removes and returns the element with the smallest <code>priority</code> from <code>self</code>.</p>","parent_name":"ConfigurableHeap"},"Structs/ConfigurableHeap.html#/init()":{"name":"init()","abstract":"<p>Initialize an empty Heap.</p>","parent_name":"ConfigurableHeap"},"Structs/ConfigurableHeap.html#/update(_:withNewPriority:)":{"name":"update(_:withNewPriority:)","abstract":"<p>Updates the priority of <code>elem</code> to <code>newPriority</code>.</p>","parent_name":"ConfigurableHeap"},"Structs/ConfigurableHeap.html#/description":{"name":"description","abstract":"<p>A string representation of the heap, including priorities of the elements.</p>","parent_name":"ConfigurableHeap"},"Enums/DoubleEndedAllocationPolicy.html#/s:17PenguinStructures27DoubleEndedAllocationPolicyO9beginningyA2CmF":{"name":"beginning","abstract":"<p>Begin allocating elements at the beginning of the buffer.</p>","parent_name":"DoubleEndedAllocationPolicy"},"Enums/DoubleEndedAllocationPolicy.html#/s:17PenguinStructures27DoubleEndedAllocationPolicyO6middleyA2CmF":{"name":"middle","abstract":"<p>Begin allocating in the middle of the buffer.</p>","parent_name":"DoubleEndedAllocationPolicy"},"Enums/DoubleEndedAllocationPolicy.html#/s:17PenguinStructures27DoubleEndedAllocationPolicyO3endyA2CmF":{"name":"end","abstract":"<p>Begin allocating at the end of the buffer.</p>","parent_name":"DoubleEndedAllocationPolicy"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV8capacity4withACyxGSi_AA0cD16AllocationPolicyOtcfc":{"name":"init(capacity:with:)","abstract":"<p>Allocate with a given capacity and insertion <code>initialPolicy</code>.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV7isEmptySbvp":{"name":"isEmpty","abstract":"<p>True if no elements are contained within the data structure, false otherwise.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV5countSivp":{"name":"count","abstract":"<p>Returns the number of elements contained within <code>self</code>.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV8capacitySivp":{"name":"capacity","abstract":"<p>Returns the capacity of <code>self</code>.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV12canPushFrontSbvp":{"name":"canPushFront","abstract":"<p>True iff there is available space at the beginning of the buffer.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV11canPushBackSbvp":{"name":"canPushBack","abstract":"<p>True iff there is available space at the end of the buffer.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV8pushBackyyxF":{"name":"pushBack(_:)","abstract":"<p>Add elem to the back of the buffer.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV7popBackxyF":{"name":"popBack()","abstract":"<p>Removes and returns the element at the back, reducing <code>self</code>&lsquo;s count by one.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV9pushFrontyyxF":{"name":"pushFront(_:)","abstract":"<p>Adds elem to the front of the buffer.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV8popFrontxyF":{"name":"popFront()","abstract":"<p>Removes and returns the element at the front, reducing <code>self</code>&lsquo;s count by one.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:17PenguinStructures17DoubleEndedBufferV10reallocate11newCapacity4withySi_AA0cD16AllocationPolicyOtF":{"name":"reallocate(newCapacity:with:)","abstract":"<p>Explicitly reallocate the backing buffer.</p>","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:Sl5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"DoubleEndedBuffer"},"Structs/DoubleEndedBuffer.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"DoubleEndedBuffer"},"Structs/Deque/Cursor.html#/s:SL1loiySbx_xtFZ":{"name":"<(_:_:)","parent_name":"Cursor"},"Structs/Deque.html#/s:17PenguinStructures5DequeV5countSivp":{"name":"count","abstract":"<p>The number of elements contained within <code>self</code>.</p>","parent_name":"Deque"},"Structs/Deque.html#/s:17PenguinStructures5DequeV15initialCapacityACyxGSiSg_tcfc":{"name":"init(initialCapacity:)","abstract":"<p>Creates an empty Deque.</p>","parent_name":"Deque"},"Structs/Deque.html#/s:17PenguinStructures5DequeV7isEmptySbvp":{"name":"isEmpty","abstract":"<p>True iff no values are contained in `self.</p>","parent_name":"Deque"},"Structs/Deque.html#/s:17PenguinStructures5DequeV8pushBackyyxF":{"name":"pushBack(_:)","abstract":"<p>Add <code>elem</code> to the back of <code>self</code>.</p>","parent_name":"Deque"},"Structs/Deque.html#/s:17PenguinStructures5DequeV7popBackxyF":{"name":"popBack()","abstract":"<p>Removes and returns the element at the back, reducing <code>self</code>&lsquo;s count by one.</p>","parent_name":"Deque"},"Structs/Deque.html#/s:17PenguinStructures5DequeV9pushFrontyyxF":{"name":"pushFront(_:)","abstract":"<p>Adds <code>elem</code> to the front of <code>self</code>.</p>","parent_name":"Deque"},"Structs/Deque.html#/s:17PenguinStructures5DequeV8popFrontxyF":{"name":"popFront()","abstract":"<p>Removes and returns the element at the front, reducing <code>self</code>&lsquo;s count by one.</p>","parent_name":"Deque"},"Structs/Deque/Cursor.html":{"name":"Cursor","parent_name":"Deque"},"Structs/Deque.html#/s:17PenguinStructures5DequeV12forEachWhile10startingAt_AC6CursorVyx_GSgAI_SbxKXEtKF":{"name":"forEachWhile(startingAt:_:)","abstract":"<p>Call <code>fn</code> for each element in the collection until <code>fn</code> returns false.</p>","parent_name":"Deque"},"Protocols/MutableHierarchicalCollection.html#/swapAt(_:_:)":{"name":"swapAt(_:_:)","abstract":"<p>Swaps the contents of <code>lhs</code> and <code>rhs</code>.</p>","parent_name":"MutableHierarchicalCollection"},"Protocols/MutableHierarchicalCollection.html#/forEachMut(_:)":{"name":"forEachMut(_:)","abstract":"<p>Applies <code>fn</code> to each element in the hierarchical collection.</p>","parent_name":"MutableHierarchicalCollection"},"Protocols/HierarchicalCollection.html#/Element":{"name":"Element","abstract":"<p>The type of element contained within this hierarchical collection.</p>","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html#/Cursor":{"name":"Cursor","abstract":"<p>A cursor represents a location within the collection.</p>","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html#/count":{"name":"count","abstract":"<p>The total number of elements within this collection.</p>","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html#/forEachWhile(startingAt:_:)":{"name":"forEachWhile(startingAt:_:)","abstract":"<p>Call <code>fn</code> for each element in the collection until <code>fn</code> returns false.</p>","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html#/forEach(_:)":{"name":"forEach(_:)","abstract":"<p>Call <code>fn</code> for each element in the collection.</p>","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html#/firstIndex(where:)":{"name":"firstIndex(where:)","abstract":"<p>Finds the first index where <code>predicate</code> is <code>true</code>, and returns a cursor that points to that","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html#/flatten()":{"name":"flatten()","abstract":"<p>Copies all elements in this hierarchical data structure into a flat array.</p>","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html#/flatten(into:)":{"name":"flatten(into:)","abstract":"<p>Copies all elements in this hierarchical data structure into the end of a collection.</p>","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html#/mapAndFlatten(_:)":{"name":"mapAndFlatten(_:)","abstract":"<p>Applies <code>fn</code> on each element in the collection, and concatenates the results.</p>","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html#/compactMapAndFlatten(_:)":{"name":"compactMapAndFlatten(_:)","abstract":"<p>Applies <code>fn</code> on each element in the collection, and concatenates the non-nil results.</p>","parent_name":"HierarchicalCollection"},"Protocols/HierarchicalCollection.html":{"name":"HierarchicalCollection","abstract":"<p>Represents a hierarchical collection of data.</p>"},"Protocols/MutableHierarchicalCollection.html":{"name":"MutableHierarchicalCollection","abstract":"<p>MutableHierarchicalCollection extends <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/HierarchicalCollection.html\">HierarchicalCollection</a></code>s to allow mutation of contents.</p>"},"Structs/Deque.html":{"name":"Deque","abstract":"<p>A dynamically-sized double-ended queue that allows pushing and popping at both the front and the"},"Structs/DoubleEndedBuffer.html":{"name":"DoubleEndedBuffer","abstract":"<p>A fixed-size, contiguous collection allowing additions and removals at either end (space"},"Enums/DoubleEndedAllocationPolicy.html":{"name":"DoubleEndedAllocationPolicy","abstract":"<p>Describes where the initial insertions into a buffer should go.</p>"},"Hierarchical%20Collections.html#/SimpleHeap":{"name":"SimpleHeap","abstract":"<p>A basic heap data structure containing <code>Element</code>s.</p>"},"Hierarchical%20Collections.html#/ReprioritizableHeap":{"name":"ReprioritizableHeap","abstract":"<p>A heap that supports reprioritizinig elements contained within it.</p>"},"Structs/ConfigurableHeap.html":{"name":"ConfigurableHeap","abstract":"<p>A hierarchical collection of <code>Element</code>s, partially ordered so that finding the minimum element"},"Structs/HierarchicalArray.html":{"name":"HierarchicalArray"},"Structs/LeafArray.html":{"name":"LeafArray","abstract":"<p>LeafArray wraps an <code>Array</code> to form a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/HierarchicalCollection.html\">HierarchicalCollection</a></code>.</p>"},"Hierarchical%20Collections.html":{"name":"Hierarchical Collections"},"Graph%20Kinds%20%28Protocols%29.html":{"name":"Graph Kinds (Protocols)"},"Graph%20Algorithms.html":{"name":"Graph Algorithms"},"Graph%20Implementations.html":{"name":"Graph Implementations"},"Graph%20Property%20Maps.html":{"name":"Graph Property Maps"},"Configurable%20Heap%20Internal%20Types.html":{"name":"Configurable Heap Internal Types"},"Other%20Extensions.html":{"name":"Other Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Other%20Protocols.html":{"name":"Other Protocols","abstract":"<p>The following protocols are available globally.</p>"}}